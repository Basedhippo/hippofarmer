// SPDX-License-Identifier: MIT
// Custom ReentrancyGuard for RoidHippos Project (based on OpenZeppelin Contracts v5.0.0)

pragma solidity ^0.8.18;

abstract contract ReentrancyGuard {
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Modifier to prevent reentrant calls to a function.
     * This modifier ensures that no nested (reentrant) calls are allowed.
     * When the function is called, the `_status` changes to `ENTERED` to prevent
     * any other call until the function completes and `_status` is reset to `NOT_ENTERED`.
     */
    modifier nonReentrant() {
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        _status = ENTERED;
        _;
        _status = NOT_ENTERED;
    }

    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}
